'''
Задача № 1. Подсчитать, сколько было выделено памяти под переменные в ранее
разработанных программах в рамках первых трех уроков. Проанализировать
результат и определить программы с наиболее эффективным использованием памяти.
Примечание: Для анализа возьмите любые 1-3 ваших программы или несколько
вариантов кода для одной и той же задачи. Результаты анализа вставьте в виде
комментариев к коду. Также укажите в комментариях версию Python и разрядность 
вашей ОС.
Версия Python: python 3.7.3
ОС: Windows 10 x64 
'''


import sys

# Урок 1, задача № 3. По введенным пользователем координатам двух точек вывести уравнение прямой вида y=kx+b,
# проходящей через эти точки.

x1, y1, x2, y2 = map(int, input('Введите кординаты (x1 y1 x2 y2): ').split())

k = (y2 - y1)/(x2 - x1)
b = y1 - k * x1

print(f'Уравнение прямой: y = {k}x + {b}')

sum_member = sys.getsizeof(a) + sys.getsizeof(x) + sys.getsizeof(y) + sys.getsizeof(z) + sys.getsizeof(
    sum_l) + sys.getsizeof(mult)
print('В программе задействовано байт памяти: {}'.format(sum_member))

# Результат запуска программы и измерения:
#
# Введите трехзначное число: 999
#
# В программе задействовано байт памяти: 98# Результаты запуска
# >>> %Run lesson6_1.py
# Введите кординаты (x1 y1 x2 y2): 0 0 10 10
# Уравнение прямой: y = 1.0x + 0.0
# В программе задействовано байт памяти: 84
# >>> %Run lesson6_1.py
# Введите кординаты (x1 y1 x2 y2): 100 100 300 300
# Уравнение прямой: y = 1.0x + 0.0
# В программе задействовано байт памяти: 88
# >>> %Run lesson6_1.py
# Введите кординаты (x1 y1 x2 y2): 1000 1000 3000 4000
# Уравнение прямой: y = 1.5x + -500.0
# В программе задействовано байт памяти: 88
# ===============================================

#Задача 3.4. Определить, какое число в массиве встречается чаще всего.
import random
import sys

n = 10000
r = [random.randint(1, 100) for _ in range(n)]
print(f'Массив: {r}')

max_i = 0
for i in r:
    if r.count(max_i) < r.count(i):
        max_i = r.index(i)

print(f'Число {r[max_i]}, встречается {r.count(max_i)} раза')
print(f'n = {n}')

sum_member = sys.getsizeof(n) + sys.getsizeof(r) + sys.getsizeof(max_i) + sys.getsizeof(i)
print('В программе задействовано байт памяти: {}'.format(sum_member))

# >>> %Run lesson6_2.py
# Массив: [58, 21, 64, 43, 27, 89, 58, 78, 31, 78]
# Число 78, встречается 0 раза
# n = 10
# В программе задействовано байт памяти: 142
# >>> %Run lesson6_2.py
# Массив: [...]
# Число 82, встречается 1 раза
# n = 100
# В программе задействовано байт памяти: 502
# >>> %Run lesson6_2.py
# Массив: [...]
# Число 29, встречается 17 раза
# n = 1000
# В программе задействовано байт памяти: 4558
# >>> %Run lesson6_2.py
# Массив: [...]
# Число 15, встречается 125 раза
# n = 10000
# В программе задействовано байт памяти: 43858
# ===============================================

#Задача 5.2
# Написать программу сложения и умножения двух шестнадцатеричных чисел.
# При этом каждое число представляется как массив, элементы которого — цифры числа.
# Например, пользователь ввёл A2 и C4F. Нужно сохранить их как [‘A’, ‘2’] и [‘C’, ‘4’, ‘F’] соответственно.
# Сумма чисел из примера: [‘C’, ‘F’, ‘1’], произведение - [‘7’, ‘C’, ‘9’, ‘F’, ‘E’].

from collections import deque
import sys

def sum_hex(x, y):
    HEX_NUM = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9,
               'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15,
               0: '0', 1: '1', 2: '2', 3: '3', 4: '4', 5: '5', 6: '6', 7: '7', 8: '8', 9: '9',
               10: 'A', 11: 'B', 12: 'C', 13: 'D', 14: 'E', 15: 'F'}
    result = deque()
    transfer = 0

    if len(y) > len(x):
        x, y = deque(y), deque(x)

    else:
        x, y = deque(x), deque(y)

    while x:

        if y:
            res = HEX_NUM[x.pop()] + HEX_NUM[y.pop()] + transfer

        else:
            res = HEX_NUM[x.pop()] + transfer

        transfer = 0

        if res < 16:
            result.appendleft(HEX_NUM[res])

        else:
            result.appendleft(HEX_NUM[res - 16])
            transfer = 1

    if transfer:
        result.appendleft('1')

    return list(result)


def mult_hex(x, y):
    HEX_NUM = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9,
               'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15,
               0: '0', 1: '1', 2: '2', 3: '3', 4: '4', 5: '5', 6: '6', 7: '7', 8: '8', 9: '9',
               10: 'A', 11: 'B', 12: 'C', 13: 'D', 14: 'E', 15: 'F'}
    result = deque()
    spam = deque([deque() for _ in range(len(y))])

    x, y = x.copy(), deque(y)

    for i in range(len(y)):
        m = HEX_NUM[y.pop()]

        for j in range(len(x) - 1, -1, -1):
            spam[i].appendleft(m * HEX_NUM[x[j]])

        for _ in range(i):
            spam[i].append(0)

    transfer = 0

    for _ in range(len(spam[-1])):
        res = transfer

        for i in range(len(spam)):
            if spam[i]:
                res += spam[i].pop()

        if res < 16:
            result.appendleft(HEX_NUM[res])

        else:
            result.appendleft(HEX_NUM[res % 16])
            transfer = res // 16

    if transfer:
            result.appendleft(HEX_NUM[transfer])

    return list(result)


a = list(input('Введите 1-е шестнадцатиричное число: ').upper())
b = list(input('Введите 2-е шестнадцатиричное число: ').upper())
# print(a, b)

print(*a, '+', *b, '=', *sum_hex(a, b))

print(*a, '*', *b, '=', *mult_hex(a, b))

sum_member = sys.getsizeof(sum_hex) + sys.getsizeof(mult_hex) + sys.getsizeof(a) + sys.getsizeof(b)
print('В программе задействовано байт памяти: {}'.format(sum_member))

# >>> %Run lesson6_3.py
# Введите 1-е шестнадцатиричное число: AA
# Введите 2-е шестнадцатиричное число: BB
# A A + B B = 1 6 5
# A A * B B = 7 C 2 E
# В программе задействовано байт памяти: 256
# >>> %Run lesson6_3.py
# Введите 1-е шестнадцатиричное число: AAA
# Введите 2-е шестнадцатиричное число: BBB
# A A A + B B B = 1 6 6 5
# A A A * B B B = 7 D 1 8 2 E
# В программе задействовано байт памяти: 264
# >>> %Run lesson6_3.py
# Введите 1-е шестнадцатиричное число: AAAA
# Введите 2-е шестнадцатиричное число: BBBB
# A A A A + B B B B = 1 6 6 6 5
# A A A A * B B B B = 7 D 2 6 D 8 2 E
# В программе задействовано байт памяти: 272

''' ИТОГ: Судя по данным, программы с наиболее эффективным использованием памяти - это первая и третья,
так как их потребление памяти будет константным и предсказуемым за счет заранее определенных размеров переменных.
Менее всего памяти требует первая программа.
Вторая программа целиком зависит от количества элементов массива.
Размер занимаемой памяти растет практически пропорционально числу N'''
